/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        //if(lists == []) return nullptr;
        vector<int> myvec {};
        for (auto x:lists) {
            while(x) {
                myvec.push_back(x -> val);
                x = x -> next;
            }
        }              
        std::sort(myvec.begin(), myvec.end());       
        ListNode *mylist = new ListNode(-1);
        ListNode* cur = mylist;
        for (auto x : myvec) {
            ListNode *temp = new ListNode(x);           
            cur -> next = temp;
            cur = cur -> next;
        }        
        ListNode* psuhead = mylist;
        mylist = mylist->next;
        delete psuhead;
        return mylist;
    }
};
