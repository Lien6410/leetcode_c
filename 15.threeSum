/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include <stdlib.h>
#include <stdio.h>

/*
struct Node {
    int data[3];
    int index;
    struct Node *next;
};
typedef struct Node node;
*/
/*
node *makeNode(int ind, int d[]);
int **nodeTo2DArray(node *L);
*/
int QuickSort(int x[], int left, int right);
void quicksort(int *data, int left, int right);
void swap(int *a, int *b);
/*
node *makeNode(int ind, int d[]) {
    node *newNode = (node *) malloc(sizeof(node));
    if (d == NULL) {
        newNode->data[0] = 0;
        newNode->data[1] = 0;
        newNode->data[2] = 0;        
    } else {
        newNode->data[0] = d[0];
        newNode->data[1] = d[1];
        newNode->data[2] = d[2];        
    }
    newNode->index = ind;
    newNode->next = NULL;
    return newNode;
}

int *nodeToArray(node *curN, int row, int col) {
    int *sols = (int *) malloc(sizeof(int) * row * col);    
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) 
            sols[i*col + j] = curN ->data[j];
        curN = curN -> next;
        if (curN == NULL) break;
    }
    return sols;   
}
*/
int QuickSort(int x[], int left, int right) {
	if (left < right) {
		int i = left + 1;
		int j = right;
		int k = x[left];
		do {
			while (x[i] < k) {
				i++;  //find Ki >= K from small index to large index.
			}
			while (x[j] > k) {
				j--; //find Kj <= k from large index to small index.
			}
			if (i < j) {
				int temp = x[j];
				x[j] = x[i];
				x[i] = temp;
			}
		} while (i < j);
		int temp = x[j];
		x[j] = x[left];
		x[left] = temp;
		QuickSort(x, left, j - 1);
		QuickSort(x, j + 1, right);
	}
	return 1;
}

void quicksort(int *data, int left, int right)
{
    int pivot, i, j;

    if (left >= right) { return; }

    pivot = data[left];

    i = left + 1;
    j = right;

    while (1)
    {
        while (i <= right)
        {
            if (data[i] > pivot)
            {
                break;
            }

            i = i + 1;
        }

        while (j > left)
        {
            if (data[j] < pivot)
            {
                break;
            }

            j = j - 1;
        }

        if (i > j) { break; }

        swap(&data[i], &data[j]);
    }

    swap(&data[left], &data[j]);

    quicksort(data, left, j - 1);
    quicksort(data, j + 1, right);
}

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int** threeSum(int* nums, int numsSize, int* returnSize) {    
    if (numsSize < 3) return NULL;
    /*
    int quickSort = QuickSort(nums, 0, numsSize - 1);
    if (!quickSort) {
        printf("QuickSort fail.\n");
        exit(1);
    } 
    */
    quicksort(nums, 0, numsSize - 1);
    for (int k = 0; k < numsSize; k++) {
        printf("sortNums[%d] = %d\n", k, nums[k]);
    }
    int index = 0;
    /*
    int temp[3] = {0};
    node *curNode = makeNode(-1, temp);
    node *L = curNode;
    */
    int *sols = (int *) malloc(sizeof(int) * 3);
    for (int i = 0; i < numsSize - 2; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) continue; //avoid repeat subsolution
        int left = i + 1, right = numsSize - 1;        
        while (left < right) {
            int curSum = nums[left] + nums[right];
            int curTarget = 0 - nums[i];
            if (curSum == curTarget) {
                //found one subsolution, save the subsolution.
                /*
                int temp2[3] = {nums[i], nums[left], nums[right]};                
                node *newNode = makeNode(index, temp2);                
                curNode->next = newNode;
                curNode = newNode;
                */
                int *temp =  (int*) realloc (sols, (index + 1) * 3 * sizeof(int));
                if (temp != NULL) {
                    sols = temp;
                    sols[3*index] = nums[i];
                    sols[3*index + 1] = nums[left];
                    sols[3*index + 2] = nums[right];
                } else {
                    free(sols);
                    printf("realloc fail.\n");
                    exit(1);
                }
                index++;                                
                left++;
                right--;
                while(nums[left] == nums[left - 1]) left++; //avoid repeat subsolution
                while(nums[right] == nums[right + 1]) right--; //avoid repeat subsolution
            } else if (curSum < curTarget) {
                left++;
            } else { //curSum > curTarget
                right--;
            }            
        }
    }
    // index = num of sols 
    /*
    node *curN = L -> next;
    if (curN == NULL) {
        printf("no answer.\n");
        exit(0);
    }
    */
    *returnSize = index;
    if (sols == NULL) {
        printf("no answer.\n");
        exit(0);        
    }
    /*
    int *a = nodeToArray(curN, index, 3);
    */
    int **result = (int **) malloc(sizeof(int *)*index);
    for (int i = 0; i < index; i++) result[i] = (int *) malloc(sizeof(int) * 3);    
    /*
    for (int i = 0; i < index; i++)
        for (int j = 0; j < 3; j++)
            result[i][j] = a[i*3 + j];
    */
    for (int i = 0; i < index; i++)
        for (int j = 0; j < 3; j++)
            result[i][j] = sols[i*3 + j];
    return result;    
}
