/*
Divide two integers without using multiplication, division and mod operator.

If it is overflow, return MAX_INT.
*/

class Solution {
public:
    int divide(int dividend, int divisor) 
    {
        
        if (dividend == INT_MIN && divisor == -1) 
            return INT_MAX;
        
        bool sign = (dividend > 0) ^ (divisor > 0); // xor(^) 0 = xor(same sign), 1 = xor(diff sign)
        
        unsigned int absDividend = abs(dividend), absDivisor = abs(divisor);
        if (absDividend<absDivisor) return 0;
        int ans = 0; // q
        while (absDividend>=absDivisor)
        {
            // binary divide.            
            // find dividend >= divisor * [a1 * 2^n + a2 * 2^(n-1) + .....]
            unsigned int accum = absDivisor, temp = 1;
            while ((accum<=1<<30) && (absDividend >= accum<<1)) 
                accum <<= 1, temp <<=1;
            ans += temp, absDividend -= accum;
            //absDividend is r, rest.
        }
        return sign ? -ans : ans;


    }
};
