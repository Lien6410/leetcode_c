/*
You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:
You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
Example 2:

Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
*/

// 矩陣順時針旋轉90度，位置轉換為：(i,j)->(j, n-1-i) thus r_m(i,j) = m(n - 1 -j,i);
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        if (matrix.empty()) return;
        int n = matrix.size();
        //cout << n ;
        vector<vector<int>> r_matrix;
        for (auto i = 0; i != n; i++) {
            vector<int> temp;
            for (auto j = 0; j != n; j++) {
                temp.push_back(matrix[n - 1 - j][i]);
            }
            r_matrix.push_back(temp);
        }
        matrix = r_matrix;        
    }
};
