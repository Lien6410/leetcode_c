/*
'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true
*/

bool isMatch(char* s,char* p)
{	int m=strlen(s),n=strlen(p);
	int i,j;
	int** dp;
	dp=(int**)malloc(sizeof(int*)*(m+1));
	for(i=0;i<=m;i++)
	{
		dp[i]=(int*)malloc(sizeof(int)*(n+1));
	}
	for(i=0;i<=m;i++)
	{
		for(j=0;j<=n;j++)
			dp[i][j]=0;
	}
    dp[0][0]=1;
	for(i=0;i<=m;i++)
	{
		for(j=0;j<=n;j++)
		{
			if(p[j-1]!='.' && p[j-1]!='*')
			{
				if(i>0 && s[i-1]==p[j-1] && dp[i-1][j-1])
					dp[i][j]=1;
			}
			else if(p[j-1]=='.')
			{
				if(i>0 && dp[i-1][j-1])
					dp[i][j]=1;
			}
			else if(j>1)
			{
				if(dp[i][j-1] || dp[i][j-2])
					dp[i][j]=1;
				else if(i>0 && (p[j-2]==s[i-1] || p[j-2]=='.') && dp[i-1][j])
					dp[i][j]=1;
			}
		}
	}
	if(dp[m][n]==1)
		return true;
	else
		return false;
}
