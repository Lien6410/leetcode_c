/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
#include<stdlib.h>

int* twoSum(int* nums, int numsSize, int target) {
    int *complement = (int *) malloc(sizeof(int));
    *(complement) = target - nums[0];
    
    for(int i = 1 ; i < numsSize ; i++)
    {
        int c = target - nums[i];
        for(int j = 0 ; j < i ; j++)       
        {
            if (c == complement[j])
            {
                int *reArray = (int *) malloc(sizeof(int)*2);
                reArray[0] = j;
                reArray[1] = i;
                free(complement);
                return reArray;
            }
        }
        complement = (int *) realloc(complement , sizeof(int)*(i + 1));
        complement[i] = c;
    }
    free(complement);
    return NULL;
}
