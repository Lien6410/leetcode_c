/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/

class Solution {
public:
    string multiply(string num1, string num2) {
        int m = num1.length(), n = num2.length();
        vector<int> pos(m+n,0);
        for(int i = m-1; i>= 0; i--)
            for(int j = n-1; j>= 0; j--)
            {
                int mul = (num1[i]-48) * (num2[j]-48);
                int p1 = i+j, p2 = i+j+1;
                int sum = mul + pos[p2];
                pos[p1] += sum/10;
                pos[p2] = sum%10;
            }
    
    string ans="";
    for(auto p : pos)
        if(!(ans.length()==0 && p == 0))
            ans += to_string(p);
    return ans.length()==0 ? "0":ans;
    }
};
