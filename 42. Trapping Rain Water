/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

*/

class Solution {
public:
    int trap(vector<int>& height) {
        int WATER = 0;
        if (height.size() < 3) return 0;
        int M1 = peak(height, 0, height.size());
        int left = M1, right = M1;
        while (left != 0) {
            left = peak(height, 0, right);
            for (int i = left; i != right; i++) {
                WATER += height[left] - height[i];
            }
            right = left;
        }        
        left = M1, right = M1;
        while (left != height.size() - 1) {
            right = peak(height, left + 1, height.size());
            for (int i = left + 1; i != right; i++) {
                WATER += height[right] - height[i];
            }
            left = right;            
        }        
        return WATER;        
    }
    
    int peak(vector<int> &height, int left, int right) {
        int index = left;
        int MAX = height[left];
        for (int i = left; i != right; i++) {
            if (height[i] > MAX) {
                MAX = height[i];
                index = i;
            }
        }
        return index;
    }
};
