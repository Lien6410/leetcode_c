/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

#include <limits.h>

int threeSumClosest(int* nums, int numsSize, int target) {
    if (numsSize <= 3) {
        int sum = 0;
        for(int i = 0; i < numsSize; i++) sum += nums[i];
        return sum;
    }
    int min_dis = INT_MAX;
    int result = 0;
    for (int i = 0; i < numsSize -2; i++) {
        for (int j = i + 1; j < numsSize - 1; j++) {
            for (int k = j + 1; k < numsSize; k++) {
                int tempSum = nums[i] + nums[j] + nums[k];
                int dis = (target > tempSum) ? (target - tempSum) : (tempSum - target);
                if (dis == 0) 
                    return target;
                else if (dis < min_dis) {
                    min_dis = dis;
                    result = tempSum;
                }                
            }
        }
    }
    return result;
}
