/*
Write a function to find the longest common prefix string amongst an array of strings.
*/
// method I, LCP(strall) = LCP(LCP(...(LCP(LCP(str1,str2),str3),..)

char* longestCommonPrefix(char** strs, int strsSize) {
    if (strs == NULL || strsSize < 1) return "";
    int lineCount = 0, sameSize = 0;   
    int len = strlen(strs[0]);    
    for (int i = 0; i < len; i++) {
        sameSize = 1; // strs[0][i] is equal to strs[0][i] for such i, thus at least one row has the ith element is equal to strs[0][i]
        for(int j = 1; j < strsSize; j++) {
            if ((*strs[j] != NULL) && (strs[j][i] == strs[0][i]))
                sameSize++;
            else
                break;
        }
        
        if(sameSize == strsSize) // if strs[j][i] is equal to strs[0][i] for each j and such i, then this column checked.
            lineCount++;
        else break;
    }
    
    if (lineCount == 0) return "";
    char *result = malloc(lineCount+1);
    strncpy(result, strs[0], lineCount);
    result[lineCount] = '\0';   
    return result;
}


/*
public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";
    for (int i = 0; i < strs[0].length() ; i++){
        char c = strs[0].charAt(i);
        for (int j = 1; j < strs.length; j ++) {
            if (i == strs[j].length() || strs[j].charAt(i) != c)
                return strs[0].substring(0, i);             
        }
    }
    return strs[0];
}
*/
