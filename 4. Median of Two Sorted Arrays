/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    int n = (int) (nums1Size / 2);
    int m = (int) (nums2Size / 2); 
    double median = 0;
    int oddeven = 0;
    if ((nums1Size % 2) * (nums2Size % 2)) { // both |nums1| and |nums2| are odd
        oddeven = 1;
        // Median = (#3[n + m + 1 - 1] + #3[n + m + 2 - 1]) / 2
    }
    else if (!(nums1Size % 2) * !(nums2Size % 2)) { // both |nums1| and |nums2| are even
        oddeven = 2;
        // Median = (#3[n + m - 1] + #3[n + m + 1 - 1]) / 2
    }
    else { // only one of |nums1| and |nums2| is even 
        oddeven = 3;
        // Median = #3[n + m + 1 - 1]
    }
    if (oddeven == 0) {
        printf("oddeven check fail.\n");
        return 0;
    }
    else {
        printf("oddeven = %d.\n", oddeven);
    }
    
    int *large = nums1Size > nums2Size ? nums1 : nums2;
    int *small = nums1Size <= nums2Size ? nums1 : nums2;
    //if (large) printf("large = %d.\n" , large[0]);
    //if (small) printf("small = %d.\n" , small[0]);
    int largesize = nums1Size > nums2Size ? nums1Size : nums2Size;
    int smallsize = nums1Size <= nums2Size ? nums1Size : nums2Size;
    
    if (largesize == 0) {
        return 0;
    } else if (largesize == 1) {
        if (smallsize == 0) {
            return large[0];
        } else {
            median = ((double) large[0] + small[0]) / 2;
            return median;
        }
    } else if (smallsize == 0) {        
        if (oddeven == 2) { // largesize is even. 
            int temp = largesize / 2;
            median = ((double) large[temp - 1] + large[temp]) / 2;
            return median;
        } else if (oddeven == 3) { // largesize is odd.
            int temp = largesize / 2;
            median = (double) large[temp];
            return median;
        } else {
            printf("smallsize = 0. oddeven fail.\n");
            return 0;
        }
    }
        
    if (oddeven == 1) {
        int i = 0;
        int j = 0;
        while (i + j + 2 < n + m + 1) {
            if (small[j] > large[i]) {
                i++;                      
            } else {
                if (j < smallsize - 1){
                    j++;
                } else {
                    i++;
                }
            }
        } // i + j + 2 is equal to n + m + 1  
        int temp1 = 0; // #3[n + m + 1 - 1]
        int temp2 = 0; // #3[n + m + 2 - 1]
        if (small[j] > large[i]) {
            if (large[i + 1] <= small[j]) {
                temp1 = large[i + 1];
                if (i + 1 == largesize - 1) {
                    temp2 = small[j]; 
                } else if (large[i + 2] <= small[j]) {
                    temp2 = large[i + 2];                    
                } else {
                    temp2 = small[j];
                }            
            } else {
                temp1 = small[j];
                if (j == smallsize - 1) {
                    temp2 = large[i + 1];
                } else if (large[i + 1] >= small[j + 1]) {
                    temp2 = small[j + 1];
                } else {
                    temp2 = large[i + 1];
                }
            }             
        } else {  //small[j] <= large[i]
            if (j == smallsize - 1) {
                temp1 = large[i];
                temp2 = large[i + 1];                
            } else {
                if (small[j + 1] < large[i]) {
                    temp1 = small[j + 1];
                    if (j + 1 == smallsize - 1) {
                        temp2 = large[i];
                    } else if (small[j + 2] < large[i]) {
                        temp2 = small[j + 2];
                    } else {
                        temp2 = large[i];
                    }                
                } else { // small[j + 1] >= large[i]
                    temp1 = large[i];
                    if (large[i + 1] < small[j + 1]) {
                        temp2 = large[i + 1];
                    } else {
                        temp2 = small[j + 1];
                    }
                }
            }            
        }
        median = ((double) temp1 + temp2) / 2;
        return median;   
    } else if (oddeven == 2) {
        int i = 0;
        int j = 0;
        while (i + j + 2 < n + m) {
            if (small[j] > large[i]) {
                i++;                      
            } else {
                if (j < smallsize - 1){
                    j++;
                } else {
                    i++;
                }
            }
        } // i + j + 2 is equal to n + m + 1  
        int temp1 = 0; // #3[n + m - 1]
        int temp2 = 0; // #3[n + m + 1 - 1]
        if (small[j] > large[i]) {
            if (large[i + 1] <= small[j]) {
                temp1 = large[i + 1];
                if (i + 1 == largesize - 1) {
                    temp2 = small[j]; 
                } else if (large[i + 2] <= small[j]) {
                    temp2 = large[i + 2];                    
                } else {
                    temp2 = small[j];
                }            
            } else {
                temp1 = small[j];
                if (j == smallsize - 1) {
                    temp2 = large[i + 1];
                } else if (large[i + 1] >= small[j + 1]) {
                    temp2 = small[j + 1];
                } else {
                    temp2 = large[i + 1];
                }
            }             
        } else {  //small[j] <= large[i]
            if (j == smallsize - 1) {
                temp1 = large[i];
                temp2 = large[i + 1];                
            } else {
                if (small[j + 1] < large[i]) {
                    temp1 = small[j + 1];
                    if (j + 1 == smallsize - 1) {
                        temp2 = large[i];
                    } else if (small[j + 2] < large[i]) {
                        temp2 = small[j + 2];
                    } else {
                        temp2 = large[i];
                    }                
                } else { // small[j + 1] >= large[i]
                    temp1 = large[i];
                    if (large[i + 1] < small[j + 1]) {
                        temp2 = large[i + 1];
                    } else {
                        temp2 = small[j + 1];
                    }
                }
            }            
        }
        median = ((double) temp1 + temp2) / 2;
        return median;           
    } else if (oddeven == 3) {
        int i = 0;
        int j = 0;
        while (i + j + 2 < n + m + 1) {
            if (small[j] > large[i]) {
                i++;                      
            } else {
                if (j < smallsize - 1){
                    j++;
                } else {
                    i++;
                }
            }
        } // i + j + 2 is equal to n + m + 1  
        int temp1 = 0; // #3[n + m + 1 - 1]        
        if (small[j] > large[i]) {
            if (large[i + 1] <= small[j]) {
                temp1 = large[i + 1];                      
            } else {
                temp1 = small[j];               
            }             
        } else {  //small[j] <= large[i]
            if (j == smallsize - 1) {
                temp1 = large[i];                         
            } else {
                if (small[j + 1] < large[i]) {
                    temp1 = small[j + 1];                              
                } else { // small[j + 1] >= large[i]
                    temp1 = large[i];                    
                }
            }            
        }
        median = (double) temp1;
        return median; 
    }
    
    
    
    return median;
}
