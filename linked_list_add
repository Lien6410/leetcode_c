/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode Node;
        
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {

    Node *reList,*previous,*first;
    first = (Node *)malloc(sizeof(Node));
    previous = (Node *)malloc(sizeof(Node));
        
    int i     = 0;   
    int carry = 0;    
    while(l1 != NULL || l2 != NULL || carry != 0)
    {
        int v1,v2;
        if(l1 != NULL)
        {
            v1 = l1 -> val;
            l1 = l1 -> next;
        }
        else
        {
            v1 = 0;
        }
        
        if(l2 != NULL)
        {
            v2 = l2 -> val;
            l2 = l2 -> next;
        }
        else
        {
            v2 = 0;
        }
        
        int sum = v1 + v2 + carry;
        
        if(sum >= 10)
        {
            carry = 1;
            sum = sum % 10;
        }
        else
        {
            carry = 0;            
        }
        
        reList = (Node *)malloc(sizeof(Node));//建立新節點
        reList -> next = NULL;
        
        reList-> val = sum;
        
        if(i == 0)
        {
            first = reList;
        }
        else
        {
            previous -> next = reList;
        }
    
        previous = reList; 
        i++;
    }
        
    
    return first;
}
