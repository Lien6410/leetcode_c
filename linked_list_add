/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

typedef struct ListNode Node;
        
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    

    Node *reList,*previous;
    int sum  = 0;
    int rsum = 0;
    int v1   = 0;
    int v2   = 0;
    int rv1  = 0;
    int rv2  = 0;
    int i    = 0;
    
    previous = NULL;
    
    while(l1)
    {
        rv1 = rv1*10+l1->val;
        l1 = l1->next;
    }
    // rv1 = reverse(l1.total#); 
    while(rv1)
    {
        v1 = v1*10 + rv1%10;
        rv1 = rv1/10;
    }
    // v1 = l1.total#
    
    while(l2)
    {
        rv2 = rv2*10+l2->val;
        l2 = l2->next;
    }
    // rv2 = reverse(l2.total#); 
    while(rv2)
    {
        v2 = v2*10 + rv2%10;
        rv2 = rv2/10;
    }
    // v2 = l2.total#
    
    sum = v1+v2;
          
    while(sum)
    {
        rsum = rsum*10+sum%10;
        sum = sum/10;
    }
    
    //first->val = sum;
       
    while(rsum)
    {
        reList = (Node *)malloc(sizeof(Node));//建立新節點
        reList->next = NULL;
        
        reList->val = rsum%10;
        rsum = rsum/10;
        reList->next = previous;
        previous = reList; 
    }
       
    
    return reList;
}
