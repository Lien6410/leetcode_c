/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.


*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (!nums.size()) return -1;
        for (auto i = 0; i != nums.size(); i++) {
            if (nums[i] == target) return i;
        }
        return -1;
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if (nums.size() == 0) return -1;
        if (nums.size() == 1) return nums[0] == target ? 0 : -1;
        
        int ns = nums.size();
        int low, high;
        low = 0;
        high = ns - 1;
        
        while (low < high - 1) {
            int mid = (low + high) / 2;
        
            if (nums[mid] == target) {
                return mid;
            }
            else if (nums[mid] < target) {
                if (nums[high] < nums[mid]) {
                    low = mid + 1;
                }
                else if (target > nums[high]) {
                    high = mid - 1;
                } 
                else if (target == nums[high]) {
                    return high;
                } 
                else {
                    low = mid + 1;
                }
            }
            else {
                if (nums[mid] < nums[low]) {
                    high = mid - 1;
                }
                else if (nums[low] > target) {
                    low = mid + 1;
                }
                else if (nums[low] == target) {
                    return low;
                }
                else {
                    high = mid - 1;
                }
                
            }
        }
        
        if (nums[low] == target) return low;
        if (nums[high] == target) return high;
        
        return -1;
    }
};
